<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://code.alibabatech.com/schema/dubbo
						http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
                     http://www.springframework.org/schema/security
                     http://www.springframework.org/schema/security/spring-security.xsd">


    <!--配置哪些资源匿名可以访问（不登录也可以访问）
    http：用于定义相关权限控制
    security="none"指定哪些资源不需要进行权限校验，可以使用通配符
     -->

        <!--<security:http security="none" pattern="/pages/a.html"></security:http>
        <security:http security="none" pattern="/pages/b.html"></security:http>-->
        <!--pages使用通配符，此处指pages下面的所有资源都不需要权限校验-->
        <!--<security:http security="none" pattern="/pages/**"></security:http>-->

        <!--此处只是对访问login.html这个资源，进行了权限设置，框架还是有默认的登录页面，若是想以此页面作为
        登录页面，那么还需要其他的配置，告知框架，以此页面作为登录页面，不用再提供登录界面了-->
        <security:http security="none" pattern="/login.html"></security:http>

    <!--
        auto-config:自动配置，如果设置为true，表示自动应用一些默认配置，比如框架会提供一个默认的登录页面
        use-expressions:是否使用spring security提供的表达式来描述权限
            此时true,代表使用表达式来描述权限,下面access="hasRole('ROLE_ADMIN')",与之对应.
            若为false,代表不适用表达式描述权限,下面access="'ROLE_ADMIN'",与之对应.
    -->
    <security:http auto-config="true" use-expressions="true">


        <!--配置拦截规则，/** 表示拦截所有请求 /*标识拦截一层所有请求如:a.html-->
        <!--
            pattern:描述拦截规则
            asscess:指定所需的访问角色或者访问权限
        -->
        <!--配置多种拦截规则-->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/pages/a.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/pages/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面-->
        <security:intercept-url pattern="/pages/c.html"  access="hasRole('ROLE_ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/pages/d.html"  access="hasRole('ADMIN')" />
        <!--这一块要放在多种拦截规则的后面,否则的话,访问页面必须要有"hasRole('ROLE_ADMIN')"这个,要么不然,什么也进不去-->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>

        <!--如果我们要使用自己指定的页面作为登录页面，必须配置登录表单.页面提交的登录表单请求是由框架负责处理-->
        <!--
            login-page:指定登录页面访问URL
             username-parameter：此处是html页面中，表单的name属性，对应认证的username
             password-parameter：此处是html页面中，表单的name属性，对应认证的password
             login-processing-url：这个是指当访问login.do页面时拦截下面在此进行认证，也就是作为登录界面
             default-target-url：当认证成功时跳转的页面
             authentication-failure-url：当认证失败时跳转的页面
        -->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/index.html"
                authentication-failure-url="/login.html"></security:form-login>

    <!--
         csrf：对应CsrfFilter过滤器
         disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
         原因：是这个框架在进行认证时要经过一个过滤器,他的默认登录界面会提交一个隐藏的域中的数据,
         这个数据与过滤器要求的数据一致,能保证通过.所以当用我们的登录页面时,会认为我们设置的登录
         界面不安全，因为通过不了过滤器,所以应该把这个过滤器给关闭。 以上可以通过使用默认登录界面,
         然后右键查看源码,得到.
       -->
    <security:csrf disabled="true"></security:csrf>

        <!--
          logout：退出登录
          logout-url：退出登录操作对应的请求路径
          logout-success-url：退出登录后的跳转页面
          invalidate-session:是否销毁session
        -->
        <security:logout logout-url="/logout.do"
                         logout-success-url="/login.html" invalidate-session="true"/>

    </security:http>

    <!--配置认证管理器-->
    <security:authentication-manager>
        <!--配置认证提供者-->
        <security:authentication-provider user-service-ref="userService">
                    <!--配置一个具体的用户，后期需要从数据库查询用户-->
            <!--<security:user-service>
                &lt;!&ndash;{noop}1234,此处的密码是明文,{noop}标准写法&ndash;&gt;
                <security:user name="admin" password="{noop}1234" authorities="ROLE_ADMIN"/>
            </security:user-service>-->

            <!--指定密码进行加密的对象-->
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>
    <!--配置Bean,目的是跳转以下的类中,来完成动态的查询用户,此处都是框架来完成.框架获取登录界面的用户名-->
    <bean id="userService" class="com.itheima.service.SpringSecurityUserService2"></bean>

    <!--配置密码加密对象,还需要指定给哪一个加密-->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

    <!--开启spring注解使用,使用@Autowired注解配置BCryptPasswordEncoder-->
    <context:annotation-config></context:annotation-config>

    <!--扫描controller包,开启注解形式的权限控制,控制级别到方法.-->
    <mvc:annotation-driven></mvc:annotation-driven>
    <context:component-scan base-package="com.itheima.controller"></context:component-scan>
    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled" />

</beans>